import numpy as np
import pandas as pd
import json
import os
import traceback
import io
from pptx import Presentation
from pptx.util import Inches
import ast

from .rag import Rag
from .notebook import NoteBook
from utility import get_file_extension

class Drag(Rag, NoteBook):
    def __init__(self, drag_setup) -> None:
        Rag.__init__(self, drag_setup)
        NoteBook.__init__(self, drag_setup)

    def data(self, file_to_open, df_var_name):
        match get_file_extension(file_to_open):
            case 'csv':
                cell_text = f"""
# Code generated by DRAG
                      
import numpy as np
import pandas as pd

{df_var_name} = pd.read_csv('{file_to_open}')
                      """
            case 'xls':
                cell_text = f"""
# Code generated by DRAG
                      
import numpy as np
import pandas as pd

{df_var_name} = pd.read_excel('{file_to_open}')
                      """
            case 'json':
                cell_text = f"""
# Code generated by DRAG
                      
import numpy as np
import pandas as pd

{df_var_name} = pd.read_json('{file_to_open}')
                      """
            case _:
                cell_text = f"""# Unsupported File Extension"""
        self.add_cell(cell_text)

    def ask(self, df:dict, question:str):
        try:
            notebook = self.read_notebook_content()
            for k, v in df.items():
                buf = io.StringIO()
                df[k].info(buf=buf)
                df[k]= buf.getvalue()
            response = self.execute_prompt(prompt= 'prompts/ask.json',
                                           df=df,
                                           notebook=notebook,
                                           question=question
                                           )
            self.add_cell(response)
        except:
            traceback.print_exc()


"""
------------------ DRAG COMMANDS ------------------
"""

def setup(config):
    hidden_file_path = os.path.expanduser('.drag_setup.json')
    with open(hidden_file_path, 'w') as file:
        json.dump(config, file)

def data(file_to_open, df_var_name='df'):
    with open('.drag_setup.json', 'r') as file:
        drag_setup = json.load(file)
        dg = Drag(drag_setup = drag_setup)
        dg.data(file_to_open, df_var_name)

def ask(df:dict, question:str):
    with open('.drag_setup.json', 'r') as file:
        drag_setup = json.load(file)
        dg = Drag(drag_setup = drag_setup)
        dg.ask(df= df, question= question)

def info(question: str):
    with open('.drag_setup.json', 'r') as file:
        drag_setup = json.load(file)
        dg = Drag(drag_setup = drag_setup)
        response = dg.execute_prompt(prompt='prompts/info.json', question=question)
        print(response)

def clear():
    with open('.drag_setup.json', 'r') as file:
        drag_setup = json.load(file)
        dg = Drag(drag_setup = drag_setup)
        print(dg.get_cells_info())

def slide(template_path=None):
    with open('.drag_setup.json', 'r') as file:
        drag_setup = json.load(file)
        dg = Drag(drag_setup = drag_setup)
    notebook = dg.read_notebook_content()
    print(f"\n\n### Notebook:\n\n{notebook}\n\n")
    response = dg.execute_prompt(prompt= 'prompts/slide.json',
                                      notebook= notebook)
    print(f"\n\n### Response\n\n{response}\n\n")
    slides_dict = ast.literal_eval(response)

    if template_path:
        prs = Presentation(template_path)
    else:
        prs = Presentation()
    for slide_title, slide_content in slides_dict.items():
        slide_layout = prs.slide_layouts[1]  # Usare il layout 'Titolo e Contenuto'
        slide = prs.slides.add_slide(slide_layout)
        title = slide.shapes.title
        content = slide.placeholders[1]
        
        title.text = slide_title
        content.text = slide_content

    prs.save('presentazione_generata.pptx')